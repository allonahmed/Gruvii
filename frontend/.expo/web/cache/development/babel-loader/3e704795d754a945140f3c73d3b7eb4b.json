{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../assets/data/postdata.json\";\nimport { filterByComments, filterByLikes, filterByTime } from \"../helpers/sortData\";\nvar savedInitialState = {\n  loggedIn: false,\n  filter: null,\n  posts: JSON.parse(data)\n};\nexport var reduxStore = createSlice({\n  name: \"reduxStore\",\n  initialState: savedInitialState,\n  reducers: {\n    updateFilter: function updateFilter(state, action) {\n      switch (action.payload) {\n        case \"recent\":\n          {\n            state.posts = filterByTime(JSON.parse(data));\n          }\n\n        case \"likes\":\n          {\n            state.posts = filterByLikes(JSON.parse(data));\n          }\n\n        case \"comments\":\n          {\n            state.posts = filterByComments(JSON.parse(data));\n          }\n\n        default:\n          return state;\n      }\n    },\n    updatePost: function updatePost(state, action) {\n      state.posts = action.payload;\n    }\n  }\n});\nvar _reduxStore$actions = reduxStore.actions,\n    updateFilter = _reduxStore$actions.updateFilter,\n    updatePost = _reduxStore$actions.updatePost;\nexport { updateFilter, updatePost };\nexport default reduxStore.reducer;","map":{"version":3,"names":["createSlice","data","filterByComments","filterByLikes","filterByTime","savedInitialState","loggedIn","filter","posts","JSON","parse","reduxStore","name","initialState","reducers","updateFilter","state","action","payload","updatePost","actions","reducer"],"sources":["/Users/allon/native/Tutorial/frontend/redux/reducers.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../assets/data/postdata.json\";\nimport {\n  filterByComments,\n  filterByLikes,\n  filterByTime\n} from \"../helpers/sortData\";\n\nconst savedInitialState = {\n  loggedIn: false,\n  filter: null,\n  posts: JSON.parse(data)\n};\n\nexport const reduxStore = createSlice({\n  name: \"reduxStore\",\n  initialState: savedInitialState,\n  reducers: {\n    updateFilter: (state, action) => {\n      switch (action.payload) {\n        case \"recent\": {\n          state.posts = filterByTime(JSON.parse(data));\n        }\n        case \"likes\": {\n          state.posts = filterByLikes(JSON.parse(data));\n        }\n        case \"comments\": {\n          state.posts = filterByComments(JSON.parse(data));\n        }\n        default:\n          return state;\n      }\n    },\n    updatePost: (state, action) => {\n      state.posts = action.payload;\n    }\n  }\n});\n\nexport const { updateFilter, updatePost } = reduxStore.actions;\n\nexport default reduxStore.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,YAHF;AAMA,IAAMC,iBAAiB,GAAG;EACxBC,QAAQ,EAAE,KADc;EAExBC,MAAM,EAAE,IAFgB;EAGxBC,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWT,IAAX;AAHiB,CAA1B;AAMA,OAAO,IAAMU,UAAU,GAAGX,WAAW,CAAC;EACpCY,IAAI,EAAE,YAD8B;EAEpCC,YAAY,EAAER,iBAFsB;EAGpCS,QAAQ,EAAE;IACRC,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;MAC/B,QAAQA,MAAM,CAACC,OAAf;QACE,KAAK,QAAL;UAAe;YACbF,KAAK,CAACR,KAAN,GAAcJ,YAAY,CAACK,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAD,CAA1B;UACD;;QACD,KAAK,OAAL;UAAc;YACZe,KAAK,CAACR,KAAN,GAAcL,aAAa,CAACM,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAD,CAA3B;UACD;;QACD,KAAK,UAAL;UAAiB;YACfe,KAAK,CAACR,KAAN,GAAcN,gBAAgB,CAACO,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAD,CAA9B;UACD;;QACD;UACE,OAAOe,KAAP;MAXJ;IAaD,CAfO;IAgBRG,UAAU,EAAE,oBAACH,KAAD,EAAQC,MAAR,EAAmB;MAC7BD,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;IACD;EAlBO;AAH0B,CAAD,CAA9B;AAyBA,0BAAqCP,UAAU,CAACS,OAAhD;AAAA,IAAQL,YAAR,uBAAQA,YAAR;AAAA,IAAsBI,UAAtB,uBAAsBA,UAAtB;;AAEP,eAAeR,UAAU,CAACU,OAA1B"},"metadata":{},"sourceType":"module"}