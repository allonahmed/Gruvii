{"ast":null,"code":"var TimeSince = function TimeSince(dateString) {\n  var year = dateString.substring(0, 4);\n  var month = dateString.substring(4, 6);\n  var day = dateString.substring(6, 8);\n  console.log(year, month, date);\n  var time = new Date(year, month - 1, day);\n  var time_formats = [[60, \"seconds\", 1], [120, \"1 minute ago\", \"1 minute from now\"], [3600, \"minutes\", 60], [7200, \"1 hour ago\", \"1 hour from now\"], [86400, \"hours\", 3600], [172800, \"Yesterday\", \"Tomorrow\"], [604800, \"days\", 86400], [1209600, \"Last week\", \"Next week\"], [2419200, \"weeks\", 604800], [4838400, \"Last month\", \"Next month\"], [29030400, \"months\", 2419200], [58060800, \"Last year\", \"Next year\"], [2903040000, \"years\", 29030400], [5806080000, \"Last century\", \"Next century\"], [58060800000, \"centuries\", 2903040000]];\n  var today = new Date().getTime() / 1000;\n  var seconds = Math.abs(today - time.getTime() / 1000),\n      token = \"ago\",\n      list_choice = 1;\n\n  if (seconds == 0) {\n    return \"Just now\";\n  }\n\n  if (seconds < 0) {\n    seconds = Math.abs(seconds);\n    token = \"from now\";\n    list_choice = 2;\n  }\n\n  var i = 0,\n      format;\n\n  while (format = time_formats[i++]) {\n    if (seconds < format[0]) {\n      if (typeof format[2] == \"string\") return format[list_choice];else return Math.floor(seconds / format[2]) + \" \" + format[1] + \" \" + token;\n    }\n  }\n\n  return time.toString;\n};\n\nexport { TimeSince };","map":{"version":3,"names":["TimeSince","dateString","year","substring","month","day","console","log","date","time","Date","time_formats","today","getTime","seconds","Math","abs","token","list_choice","i","format","floor","toString"],"sources":["/Users/allon/native/Tutorial/frontend/helpers/timeSince.js"],"sourcesContent":["const TimeSince = (dateString) => {\n  let year = dateString.substring(0, 4);\n  let month = dateString.substring(4, 6);\n  let day = dateString.substring(6, 8);\n  console.log(year, month, date);\n\n  let time = new Date(year, month - 1, day);\n  let time_formats = [\n    [60, \"seconds\", 1], // 60\n    [120, \"1 minute ago\", \"1 minute from now\"], // 60*2\n    [3600, \"minutes\", 60], // 60*60, 60\n    [7200, \"1 hour ago\", \"1 hour from now\"], // 60*60*2\n    [86400, \"hours\", 3600], // 60*60*24, 60*60\n    [172800, \"Yesterday\", \"Tomorrow\"], // 60*60*24*2\n    [604800, \"days\", 86400], // 60*60*24*7, 60*60*24\n    [1209600, \"Last week\", \"Next week\"], // 60*60*24*7*4*2\n    [2419200, \"weeks\", 604800], // 60*60*24*7*4, 60*60*24*7\n    [4838400, \"Last month\", \"Next month\"], // 60*60*24*7*4*2\n    [29030400, \"months\", 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n    [58060800, \"Last year\", \"Next year\"], // 60*60*24*7*4*12*2\n    [2903040000, \"years\", 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n    [5806080000, \"Last century\", \"Next century\"], // 60*60*24*7*4*12*100*2\n    [58060800000, \"centuries\", 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n  ];\n\n  let today = new Date().getTime() / 1000;\n  let seconds = Math.abs(today - time.getTime() / 1000),\n    token = \"ago\",\n    list_choice = 1;\n\n  if (seconds == 0) {\n    return \"Just now\";\n  }\n  if (seconds < 0) {\n    seconds = Math.abs(seconds);\n    token = \"from now\";\n    list_choice = 2;\n  }\n  let i = 0,\n    format;\n  while ((format = time_formats[i++]))\n    if (seconds < format[0]) {\n      if (typeof format[2] == \"string\") return format[list_choice];\n      else\n        return Math.floor(seconds / format[2]) + \" \" + format[1] + \" \" + token;\n    }\n  return time.toString;\n};\n\nexport { TimeSince };\n"],"mappings":"AAAA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAgB;EAChC,IAAIC,IAAI,GAAGD,UAAU,CAACE,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAX;EACA,IAAIC,KAAK,GAAGH,UAAU,CAACE,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAZ;EACA,IAAIE,GAAG,GAAGJ,UAAU,CAACE,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAV;EACAG,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkBE,KAAlB,EAAyBI,IAAzB;EAEA,IAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASR,IAAT,EAAeE,KAAK,GAAG,CAAvB,EAA0BC,GAA1B,CAAX;EACA,IAAIM,YAAY,GAAG,CACjB,CAAC,EAAD,EAAK,SAAL,EAAgB,CAAhB,CADiB,EAEjB,CAAC,GAAD,EAAM,cAAN,EAAsB,mBAAtB,CAFiB,EAGjB,CAAC,IAAD,EAAO,SAAP,EAAkB,EAAlB,CAHiB,EAIjB,CAAC,IAAD,EAAO,YAAP,EAAqB,iBAArB,CAJiB,EAKjB,CAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,CALiB,EAMjB,CAAC,MAAD,EAAS,WAAT,EAAsB,UAAtB,CANiB,EAOjB,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAPiB,EAQjB,CAAC,OAAD,EAAU,WAAV,EAAuB,WAAvB,CARiB,EASjB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CATiB,EAUjB,CAAC,OAAD,EAAU,YAAV,EAAwB,YAAxB,CAViB,EAWjB,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAXiB,EAYjB,CAAC,QAAD,EAAW,WAAX,EAAwB,WAAxB,CAZiB,EAajB,CAAC,UAAD,EAAa,OAAb,EAAsB,QAAtB,CAbiB,EAcjB,CAAC,UAAD,EAAa,cAAb,EAA6B,cAA7B,CAdiB,EAejB,CAAC,WAAD,EAAc,WAAd,EAA2B,UAA3B,CAfiB,CAAnB;EAkBA,IAAIC,KAAK,GAAG,IAAIF,IAAJ,GAAWG,OAAX,KAAuB,IAAnC;EACA,IAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAGH,IAAI,CAACI,OAAL,KAAiB,IAAlC,CAAd;EAAA,IACEI,KAAK,GAAG,KADV;EAAA,IAEEC,WAAW,GAAG,CAFhB;;EAIA,IAAIJ,OAAO,IAAI,CAAf,EAAkB;IAChB,OAAO,UAAP;EACD;;EACD,IAAIA,OAAO,GAAG,CAAd,EAAiB;IACfA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASF,OAAT,CAAV;IACAG,KAAK,GAAG,UAAR;IACAC,WAAW,GAAG,CAAd;EACD;;EACD,IAAIC,CAAC,GAAG,CAAR;EAAA,IACEC,MADF;;EAEA,OAAQA,MAAM,GAAGT,YAAY,CAACQ,CAAC,EAAF,CAA7B;IACE,IAAIL,OAAO,GAAGM,MAAM,CAAC,CAAD,CAApB,EAAyB;MACvB,IAAI,OAAOA,MAAM,CAAC,CAAD,CAAb,IAAoB,QAAxB,EAAkC,OAAOA,MAAM,CAACF,WAAD,CAAb,CAAlC,KAEE,OAAOH,IAAI,CAACM,KAAL,CAAWP,OAAO,GAAGM,MAAM,CAAC,CAAD,CAA3B,IAAkC,GAAlC,GAAwCA,MAAM,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0DH,KAAjE;IACH;EALH;;EAMA,OAAOR,IAAI,CAACa,QAAZ;AACD,CA/CD;;AAiDA,SAAStB,SAAT"},"metadata":{},"sourceType":"module"}