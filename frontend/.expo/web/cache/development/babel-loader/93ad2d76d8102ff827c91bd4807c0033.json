{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../assets/data/postdata.json\";\nimport { filterByComments, filterByLikes, filterByTime } from \"../helpers/sortData\";\nvar savedInitialState = {\n  loggedIn: false,\n  filter: null,\n  posts: JSON.parse(data),\n  query: null\n};\nexport var reduxStore = createSlice({\n  name: \"reduxStore\",\n  initialState: savedInitialState,\n  reducers: {\n    updateFilter: function updateFilter(state, action) {\n      if (action.payload === \"recent\") {\n        state.posts = filterByTime(JSON.parse(data));\n      } else state.posts = JSON.parse(data);\n    },\n    updatePost: function updatePost(state, action) {\n      state.posts = action.payload;\n    },\n    updateQuery: function updateQuery(state, action) {\n      state.query = action.payload;\n    }\n  }\n});\nvar _reduxStore$actions = reduxStore.actions,\n    updateFilter = _reduxStore$actions.updateFilter,\n    updatePost = _reduxStore$actions.updatePost,\n    updateQuery = _reduxStore$actions.updateQuery;\nexport { updateFilter, updatePost, updateQuery };\nexport default reduxStore.reducer;","map":{"version":3,"names":["createSlice","data","filterByComments","filterByLikes","filterByTime","savedInitialState","loggedIn","filter","posts","JSON","parse","query","reduxStore","name","initialState","reducers","updateFilter","state","action","payload","updatePost","updateQuery","actions","reducer"],"sources":["/Users/allon/native/Tutorial/frontend/redux/reducers.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../assets/data/postdata.json\";\nimport {\n  filterByComments,\n  filterByLikes,\n  filterByTime\n} from \"../helpers/sortData\";\n\nconst savedInitialState = {\n  loggedIn: false,\n  filter: null,\n  posts: JSON.parse(data),\n  query: null\n};\n\nexport const reduxStore = createSlice({\n  name: \"reduxStore\",\n  initialState: savedInitialState,\n  reducers: {\n    updateFilter: (state, action) => {\n      //   switch (action.payload) {\n      //     case \"recent\": {\n      //       state.posts = filterByTime(JSON.parse(data));\n      //     }\n      //     case \"likes\": {\n      //       state.posts = filterByLikes(JSON.parse(data));\n      //     }\n      //     case \"comments\": {\n      //       state.posts = filterByComments(JSON.parse(data));\n      //     }\n      //     default:\n      //       return state;\n      //   }\n      if (action.payload === \"recent\") {\n        state.posts = filterByTime(JSON.parse(data));\n      } else state.posts = JSON.parse(data);\n    },\n    updatePost: (state, action) => {\n      state.posts = action.payload;\n    },\n    updateQuery: (state, action) => {\n      state.query = action.payload;\n    }\n  }\n});\n\nexport const { updateFilter, updatePost, updateQuery } = reduxStore.actions;\n\nexport default reduxStore.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,YAHF;AAMA,IAAMC,iBAAiB,GAAG;EACxBC,QAAQ,EAAE,KADc;EAExBC,MAAM,EAAE,IAFgB;EAGxBC,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWT,IAAX,CAHiB;EAIxBU,KAAK,EAAE;AAJiB,CAA1B;AAOA,OAAO,IAAMC,UAAU,GAAGZ,WAAW,CAAC;EACpCa,IAAI,EAAE,YAD8B;EAEpCC,YAAY,EAAET,iBAFsB;EAGpCU,QAAQ,EAAE;IACRC,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;MAc/B,IAAIA,MAAM,CAACC,OAAP,KAAmB,QAAvB,EAAiC;QAC/BF,KAAK,CAACT,KAAN,GAAcJ,YAAY,CAACK,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAD,CAA1B;MACD,CAFD,MAEOgB,KAAK,CAACT,KAAN,GAAcC,IAAI,CAACC,KAAL,CAAWT,IAAX,CAAd;IACR,CAlBO;IAmBRmB,UAAU,EAAE,oBAACH,KAAD,EAAQC,MAAR,EAAmB;MAC7BD,KAAK,CAACT,KAAN,GAAcU,MAAM,CAACC,OAArB;IACD,CArBO;IAsBRE,WAAW,EAAE,qBAACJ,KAAD,EAAQC,MAAR,EAAmB;MAC9BD,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;IACD;EAxBO;AAH0B,CAAD,CAA9B;AA+BA,0BAAkDP,UAAU,CAACU,OAA7D;AAAA,IAAQN,YAAR,uBAAQA,YAAR;AAAA,IAAsBI,UAAtB,uBAAsBA,UAAtB;AAAA,IAAkCC,WAAlC,uBAAkCA,WAAlC;;AAEP,eAAeT,UAAU,CAACW,OAA1B"},"metadata":{},"sourceType":"module"}